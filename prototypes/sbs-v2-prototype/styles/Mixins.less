// Ensure that browser recognises there is a height to a 'float'ed child element.
// We should not be using floats in the codebase, using the more modern flexbox. But this is here
// from some legacy styling.
// @TODO(blambo, 2018-04-13): This should be removed, however before that we need to remove all
// cases of it, which requires removing all uses of 'floating' elements.
.clearfix {
  *zoom: 1;

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/*  Alignment
  ============================= */

// Make the child elements into a row that is vertically centered
.center-aligned {
  .display(flex);
  .align-items(center);
}

// Center an elements children both vertically and horizontally
.center {
  .display(flex);
  .align-items(center);
  .justify-content(center);
}

// Similar to center-aligned, but as a column
.v-center {
  .display(flex);
  .flex-direction(column);
  .align-items(center);
  .justify-content(center);
}

.space-between {
  .display(flex);
  .align-items(center);
  .justify-content(space-between);
}

/*  Misc
  ============================= */

.containerFixed {
  height: 100%;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
}

.no-text-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/*  Cross Browser Helpers
  ============================= */

.linear-gradient(@from, @to) {
  background-color: @from;
  background-image: -webkit-gradient(
    linear,
    0% 0%,
    0% 100%,
    from(@from),
    to(@to)
  );
  background-image: -webkit-linear-gradient(top, @from, @to);
  background-image: -moz-linear-gradient(top, @from, @to);
  background-image: -ms-linear-gradient(top, @from, @to);
  background-image: -o-linear-gradient(top, @from, @to);
}

.linear-gradient-lateral(@from, @to) {
  background-color: @from;
  background-image: -webkit-gradient(
    linear,
    0% 0%,
    0% 100%,
    from(@from),
    to(@to)
  );
  background-image: -webkit-linear-gradient(left, @from, @to);
  background-image: -moz-linear-gradient(left, @from, @to);
  background-image: -ms-linear-gradient(left, @from, @to);
  background-image: -o-linear-gradient(left, @from, @to);
}

.animation(@value1, @value2: X, ...) {
  @value: ~` "@{arguments}" .replace(/ [\[\]]|\, \sX/g, "") `;
  -webkit-animation: @value;
  -moz-animation: @value;
  -o-animation: @value;
  animation: @value;
}

.animation-delay(@arguments) {
  -webkit-animation-delay: @arguments;
  -moz-animation-delay: @arguments;
  -o-animation-delay: @arguments;
  animation-delay: @arguments;
}

//  My Transition Functions
.transition(@value1, @value2: X, ...) {
  @value: ~` "@{arguments}" .replace(/ [\[\]]|\, \sX/g, "") `;
  -webkit-transition: @value;
  -moz-transition: @value;
  -o-transition: @value;
  transition: @value;
}

.transition-delay(@time) {
  -webkit-transition-delay: @time;
  -moz-transition-delay: @time;
  -o-transition-delay: @time;
  transition-delay: @time;
}

.transition-duration(@time) {
  -webkit-transition-duration: @time;
  -moz-transition-duration: @time;
  -o-transition-duration: @time;
  transition-duration: @time;
}

.transition-style(@arguments) {
  -webkit-transform-style: @arguments;
  -moz-transform-style: @arguments;
  -o-transform-style: @arguments;
  transform-style: @arguments;
}

.transform(@arguments) {
  -webkit-transform: @arguments;
  -moz-transform: @arguments;
  -o-transform: @arguments;
  transform: @arguments;
}

.backface-visibility(@arguments) {
  backface-visibility: @arguments;
  -webkit-backface-visibility: @arguments;
  -moz-backface-visibility: @arguments;
  -ms-backface-visibility: @arguments;
}

.perspective(@arguments) {
  perspective: @arguments;
  -webkit-perspective: @arguments;
  -moz-perspective: @arguments;
  -ms-perspective: @arguments;
}

.scale (@factor) {
  -webkit-transform: scale(@factor);
  -moz-transform: scale(@factor);
  -ms-transform: scale(@factor);
  -o-transform: scale(@factor);
}

.fillBackground {
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
}

/*  Spinning
  ============================= */

.spin(@time: 0.7s, @numberOfPlays: infinite) {
  -webkit-animation: spin @time @numberOfPlays linear;
  -moz-animation: spin @time @numberOfPlays linear;
  -o-animation: spin @time @numberOfPlays linear;
  -ms-animation: spin @time @numberOfPlays linear;
}

@-webkit-keyframes spin {
  0% {
    -webkit-transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
  }
}

@-moz-keyframes spin {
  0% {
    -moz-transform: rotate(0deg);
  }
  100% {
    -moz-transform: rotate(360deg);
  }
}

@-o-keyframes spin {
  0% {
    -o-transform: rotate(0deg);
  }
  100% {
    -o-transform: rotate(360deg);
  }
}

@-ms-keyframes spin {
  0% {
    -ms-transform: rotate(0deg);
  }
  100% {
    -ms-transform: rotate(360deg);
  }
}

/*  Filters
  ============================= */

.blur(@blurAmount) {
  -webkit-filter: blur(@blurAmount);
  -moz-filter: blur(@blurAmount);
  -ms-filter: blur(@blurAmount);
  filter: blur(@blurAmount);
}

.brightness(@brightness) {
  -webkit-filter: brightness(@brightness);
  -moz-filter: brightness(@brightness);
  -ms-filter: brightness(@brightness);
  filter: brightness(@brightness);
}

/* Shapes
  ============================= */

.triangle-up(@size: 100px, @color: red) {
  &:after {
    content: "";
    display: block;
    position: absolute;
    z-index: 999999;
    left: 50%;
    margin-left: -(@size / 1.25);
    top: -@size;
    width: 0;
    height: 0;
    border-left: @size / 1.25 solid transparent;
    border-right: @size / 1.25 solid transparent;
    border-bottom: @size solid @color;
  }
}

.triangle-down(@size: 100px, @color: red) {
  &:after {
    content: "";
    display: block;
    position: absolute;
    z-index: 999999;
    left: 50%;
    margin-left: -(@size / 1.25);
    bottom: -@size;
    width: 0;
    height: 0;
    border-left: @size / 1.25 solid transparent;
    border-right: @size / 1.25 solid transparent;
    border-top: @size solid @color;
  }
}

.triangle-left(@size: 100px, @color: red) {
  width: 0;
  height: 0;
  border-top: @size / 2 solid transparent;
  border-right: @size solid @color;
  border-bottom: @size / 2 solid transparent;
}

.triangle-right(@size: 100px, @color: red) {
  &:after {
    content: "";
    display: block;
    position: absolute;
    z-index: 999999;
    left: 50%;
    margin-left: -(@size / 1.25);
    bottom: -@size;
    width: 0;
    height: 0;
    border-top: @size / 1.25 solid transparent;
    border-left: @size solid @color;
    border-bottom: @size / 1.25 solid transparent;
  }
}

/* Placeholders
  ============================= */

.placeholder(@size: 16px, @color: @placeholderText, @style: normal, @fontWeight: 400) {
  .style {
    color: @color;
    font-size: @size;
    font-style: @style;
    .sans;
    font-weight: @fontWeight;
  }
  // Old Firefox 18 -
  &:-moz-placeholder {
    .style;
  }

  // New Firefox 19 +
  &::-moz-placeholder {
    .style;
  }

  // Chrome
  &::-webkit-input-placeholder {
    .style;
  }

  // IE (Gross...)
  &:-ms-input-placeholder {
    .style;
  }
}

// From: http://stackoverflow.com/questions/23728726/css-less-placeholder-mixin
.placeholderStyles(@rules) {
  &::-webkit-input-placeholder {
    @rules();
  }
  &:-moz-placeholder {
    @rules();
  }
  &::-moz-placeholder {
    @rules();
  }
  &:-ms-input-placeholder {
    @rules();
  }
}

/* Slider Thumb Styling
  ============================= */

.sliderThumbStyles(@rules, @hover-rules: {}, @focus-rules: {}) {
  // For Chrome.
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    @rules();
  }

  // For Firefox.
  &::-moz-range-thumb {
    -moz-appearance: none;
    @rules();
  }

  &::-ms-thumb {
    @rules();
  }

  &:hover {
    &::-webkit-slider-thumb {
      @hover-rules();
    }

    // For Firefox.
    &::-moz-range-thumb {
      @hover-rules();
    }

    &::-ms-thumb {
      @hover-rules();
    }
  }

  &:focus {
    &::-webkit-slider-thumb {
      @focus-rules();
    }

    // For Firefox.
    &::-moz-range-thumb {
      @focus-rules();
    }

    &::-ms-thumb {
      @focus-rules();
    }
  }
}

.sliderTrackStyles(@rules) {
  &::-webkit-slider-runnable-track {
    border: none;
    @rules();
  }

  &::-moz-range-track {
    border: none;
    @rules();
  }

  &::-ms-track {
    border: none;
    @rules();
  }
}

/* Link Styling
  ============================= */

.link-styler {
  color: darken(@emerald, 10%);
  padding-bottom: 3px;
  border-bottom: 2px solid fade(@emerald, 30%);
  .transition(all 0.25s ease);
  cursor: pointer;

  &:hover {
    border-bottom: 4px solid fade(@emerald, 80%);
    color: darken(@emerald, 3%);
  }
}

/* Animation Staggering
============================== */

// Stagger transitions on a list of elements.
.stagger-delay(@counter: 25, @interval: 0.2) when (@counter > 0) {
  .stagger-delay((@counter - 1));
  &:nth-child(@{counter}) {
    .transition-delay(@counter * @interval);
  }
}

// Stagger the animations on a list of elements.
.stagger-animation(@counter: 25, @interval: 0.2) when (@counter > 0) {
  .stagger-animation((@counter - 1));
  &:nth-child(@{counter}) {
    .transition-animation(@counter * @interval);
  }
}
